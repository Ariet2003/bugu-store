// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

enum ContactType {
  WHATSAPP
  CALL
}

enum PaymentMethod {
  CARD
  WALLET
  MBANK
  ELCART
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  STATUS_CHANGE
}

enum Role {
  MANAGER
}

// Models
model Category {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  parentId  String?  @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  parent   Category?  @relation("CategoryTree", fields: [parentId], references: [id])
  children Category[] @relation("CategoryTree")
  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(uuid()) @db.Uuid
  categoryId  String   @map("category_id") @db.Uuid
  name        String
  description String
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  category Category          @relation(fields: [categoryId], references: [id])
  variants ProductVariant[]

  @@map("products")
}

model ProductVariant {
  id            String  @id @default(uuid()) @db.Uuid
  productId     String  @map("product_id") @db.Uuid
  size          String
  color         String
  sku           String?
  quantity      Int
  price         Decimal @db.Decimal(10, 2)
  discountPrice Decimal? @map("discount_price") @db.Decimal(10, 2)

  // Relations
  product    Product           @relation(fields: [productId], references: [id])
  orderItems OrderItem[]
  images     ProductImage[]
  attributes ProductAttribute[]

  @@map("product_variants")
}

model ProductImage {
  id               String  @id @default(uuid()) @db.Uuid
  productVariantId String  @map("product_variant_id") @db.Uuid
  imageUrl         String  @map("image_url")
  isMain           Boolean @default(false) @map("is_main")

  // Relations
  productVariant ProductVariant @relation(fields: [productVariantId], references: [id])

  @@map("product_images")
}

model ProductAttribute {
  id               String @id @default(uuid()) @db.Uuid
  productVariantId String @map("product_variant_id") @db.Uuid
  name             String
  value            String

  // Relations
  productVariant ProductVariant @relation(fields: [productVariantId], references: [id])

  @@map("product_attributes")
}

model Order {
  id              String      @id @default(uuid()) @db.Uuid
  orderNumber     String      @unique @map("order_number")
  totalPrice      Decimal     @map("total_price") @db.Decimal(10, 2)
  status          OrderStatus @default(PENDING)
  customerName    String      @map("customer_name")
  customerPhone   String      @map("customer_phone")
  contactType     ContactType @map("contact_type")
  customerAddress String      @map("customer_address")
  storeId         String?     @map("store_id") @db.Uuid
  shiftId         String?     @map("shift_id") @db.Uuid
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  // Relations
  items   OrderItem[]
  payment Payment?
  audits  OrderAudit[]
  store   Store?  @relation(fields: [storeId], references: [id])
  shift   Shift?  @relation(fields: [shiftId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(uuid()) @db.Uuid
  orderId   String  @map("order_id") @db.Uuid
  variantId String  @map("variant_id") @db.Uuid
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  // Relations
  order   Order          @relation(fields: [orderId], references: [id])
  variant ProductVariant @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

model Payment {
  id            String        @id @default(uuid()) @db.Uuid
  orderId       String        @unique @map("order_id") @db.Uuid
  paymentMethod PaymentMethod @map("payment_method")
  amount        Decimal       @db.Decimal(10, 2)
  status        PaymentStatus @default(PENDING)
  transactionId String?       @map("transaction_id")
  createdAt     DateTime      @default(now()) @map("created_at")

  // Relations
  order Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Setting {
  id    String @id @default(uuid()) @db.Uuid
  key   String @unique
  value String

  @@map("settings")
}

model Store {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  address   String
  phone     String
  location  String
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  shifts Shift[]
  orders Order[]

  @@map("stores")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  phone     String   @unique
  role      Role     @default(MANAGER)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  shifts Shift[]

  @@map("users")
}

model Shift {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  storeId   String    @map("store_id") @db.Uuid
  startedAt DateTime  @map("started_at")
  endedAt   DateTime? @map("ended_at")

  // Relations
  user   User    @relation(fields: [userId], references: [id])
  store  Store   @relation(fields: [storeId], references: [id])
  orders Order[]

  @@map("shifts")
}

model OrderAudit {
  id          String      @id @default(uuid()) @db.Uuid
  orderId     String      @map("order_id") @db.Uuid
  action      AuditAction
  fieldName   String?     @map("field_name")   // Какое поле изменено
  oldValue    String?     @map("old_value")    // Старое значение
  newValue    String?     @map("new_value")    // Новое значение
  adminId     String?     @map("admin_id")     // ID администратора (пока null, можно добавить позже)
  adminName   String?     @map("admin_name")   // Имя администратора
  comment     String?                          // Комментарий к изменению
  ipAddress   String?     @map("ip_address")   // IP адрес
  userAgent   String?     @map("user_agent")   // User Agent
  createdAt   DateTime    @default(now()) @map("created_at")

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_audits")
}
